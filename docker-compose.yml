version: '3.9'
volumes:
  postgres_gorch:
  kafka_gorch:

services:
  producer:
    image: 'bezbasheniy/gorchanyuk.producer:0.1.0'
    build:
      context: ./metricsProducer
    container_name: gorchanyuk_producer
    ports:
      - "8090:8090"
    environment:
      TRACING_URL: http://jaeger:4318/v1/traces
      KAFKA_BOOTSTRAP-SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_started
      jaeger:
        condition: service_started

  consumer:
    image: 'bezbasheniy/gorchanyuk.consumer:0.1.0'
    build:
      context: ./metricsConsumer
    container_name: gorchanyuk_consumer
    ports:
      - "8091:8091"
    depends_on:
      database:
        condition: service_healthy
      kafka:
        condition: service_started
      jaeger:
        condition: service_started
    environment:
      TRACING_URL: http://jaeger:4318/v1/traces
      KAFKA_BOOTSTRAP-SERVERS: kafka:9092
      DB_URL: jdbc:postgresql://database:5432/t1_home_work_2
      DB_USERNAME: postgres
      DB_PASSWORD: postgres


  database:
    container_name: database
    image: postgres:16-alpine3.20
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: t1_home_work_2
    volumes:
      - postgres_gorch:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready" ]
      interval: 20s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    healthcheck:
      test: [ "CMD-SHELL", "echo stat | nc -w 2 localhost 2181" ]
      interval: 20s
      timeout: 10s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "29092:29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    volumes:
      - kafka_gorch:/var/lib/kafka/data

  grafana:
    build:
      context: ./grafana
    ports:
      - 3000:3000
    volumes:
      - ./grafana/volumes:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin


  prometheus:
    image: prom/prometheus
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/volumes:/prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "16686:16686" # the jaeger UI
      - "4317:4317" # the OpenTelemetry collector grpc
      - "4318:4318" # the OpenTelemetry collector http
    environment:
      - COLLECTOR_OTLP_ENABLED=true

  logstash:
    image: logstash:8.14.3
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs/:/usr/share/logstash/logs/
    ports:
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
